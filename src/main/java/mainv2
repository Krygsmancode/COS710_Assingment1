import org.apache.commons.math3.util.Pair;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.jfree.chart.ChartFactory;
//import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class Main {
    public static void main(String[] args) {
        // Create a primitive set with the operations and terminals
        PrimitiveSet primitiveSet = new PrimitiveSet();

        // Set the mutation probability, maximum depth for the trees, population size, and random seed
        double mutationProb = 0.9;
        int maxDepth = 5;
        int populationSize = 7000;
        int randomSeed = 42;
        int tournamentSize = 3;
        double crossoverProb = 0.9;

        // Create a population initializer and fitness evaluator
        PopulationInitialiser populationInitialiser = new PopulationInitialiser(primitiveSet, maxDepth, randomSeed);
        String datasetPath = "/Users/frankoswanepoel/Desktop/2024/COS 710/Assingments/processed_diabetes.csv";
        FitnessEvaluator fitnessEvaluator = new FitnessEvaluator(datasetPath);

        // Generate the initial population and evaluate its fitness
        List<Individual> population = populationInitialiser.initialisePopulation(populationSize);
        fitnessEvaluator.evaluatePopulation(population);

        // Create a Random object for generating random numbers, a Mutation object, and a Crossover object
        Random random = new Random(randomSeed);
        Mutation mutation = new Mutation(primitiveSet, mutationProb, maxDepth, randomSeed);
        Crossover crossover = new Crossover(randomSeed, maxDepth);

        // List to store the best fitness scores in each generation
        List<Double> bestFitnessScores = new ArrayList<>();

        // Iterate for a certain number of generations
        for (int generation = 0; generation < 5000; generation++) {
            System.out.println("Generation " + (generation + 1) + ":" );

            // Tournament selection
            TournamentSelection tournamentSelection = new TournamentSelection(tournamentSize, randomSeed);
            List<Individual> parents = tournamentSelection.select(population, populationSize);

            // Crossover and mutation
            List<Individual> offspring = new ArrayList<>();
            for (int i = 0; i < parents.size(); i += 2) {
                Individual parent1 = parents.get(i);
                Individual parent2 = parents.get(i + 1);

                if (random.nextDouble() < crossoverProb) {
                    // Perform crossover using the Crossover class
                    crossover.crossover(parent1, parent2, offspring);
                } else {
                    // No crossover, just add the parents to the offspring list
                    offspring.add(parent1.clone());
                    offspring.add(parent2.clone());
                }


            }

            // Mutation
            mutation.mutatePopulation(offspring);

            // Evaluate the fitness of the new offspring
            fitnessEvaluator.evaluatePopulation(offspring);

            // Select the next generation
            population = tournamentSelection.select(population, populationSize / 2);
            population.addAll(tournamentSelection.select(offspring, populationSize / 2));

            // Get the best individual
            Individual bestIndividual = getBestIndividual(population);

            // Store the best fitness score
            bestFitnessScores.add(bestIndividual.getFitness());

            System.out.println("Best Individual: " + bestIndividual.getRoot());
            System.out.println("Fitness: "+bestIndividual.getFitness() );
            System.out.println();
        }

        // Find the best individual and its fitness
        Individual bestIndividual = getBestIndividual(population);
        double bestFitness = bestIndividual.getFitness();

        // Save the results to CSV
        saveResultsToCSV(mutationProb, maxDepth, populationSize, tournamentSize, crossoverProb, bestIndividual, bestFitness);

        // Plot the fitness scores over generations
        JFreeChart chart = plotFitness(bestFitnessScores);

        // Save chart as image
       // saveChartAsImage(chart, "fitness_over_generations.png");
    }

    private static Individual getBestIndividual(List<Individual> population) {
        return population.stream()
                .max((ind1, ind2) -> Double.compare(ind1.getFitness(), ind2.getFitness()))
                .orElseThrow(() -> new RuntimeException("Failed to find the best individual"));
    }

    private static void saveResultsToCSV(double mutationProb, int maxDepth, int populationSize,
                                         int tournamentSize, double crossoverProb,
                                         Individual bestIndividual, double bestFitness) {
        // CSV header if needed: MutationProbability,TreeMaxDepth,PopulationSize,TournamentSize,CrossoverProbability,BestIndividual,BestFitness
        String csvFile = "experiment_results.csv";
        try (FileWriter writer = new FileWriter(csvFile, true)) {
            writer.append(String.format("%f,%d,%d,%d,%f,\"%s\",%f%n",
                    mutationProb, maxDepth, populationSize, tournamentSize,
                    crossoverProb, bestIndividual.getRoot().toString(),
                    bestFitness));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static JFreeChart plotFitness(List<Double> bestFitnessScores) {
        XYSeries series = new XYSeries("Fitness Over Generations");
        for (int i = 0; i < bestFitnessScores.size(); i++) {
            series.add(i, bestFitnessScores.get(i));
        }

        XYSeriesCollection dataset = new XYSeriesCollection(series);
        return ChartFactory.createXYLineChart(
                "Fitness Over Generations", "Generation", "Fitness", dataset);
    }

//    private static void saveChartAsImage(JFreeChart chart, String fileName) {
//        try {
//            ChartUtilities.saveChartAsPNG(new File(fileName), chart, 600, 400);
//        } catch (IOException e) {
//            System.err.println("Problem occurred creating chart.");
//        }
//    }
}
